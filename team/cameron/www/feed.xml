<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSC317 - Networks - Cameron Seebach</title>
    <description>A site containing notes from Prof. Tabak's CSC317 course, taken in Fall of 2016.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 05 Oct 2016 17:58:02 +0000</pubDate>
    <lastBuildDate>Wed, 05 Oct 2016 17:58:02 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Programming a simple FTP server</title>
        <description>
</description>
        <pubDate>Wed, 05 Oct 2016 17:54:00 +0000</pubDate>
        <link>/2016/10/05/ftp-server.html</link>
        <guid isPermaLink="true">/2016/10/05/ftp-server.html</guid>
        
        
      </item>
    
      <item>
        <title>Socket Programming in Python</title>
        <description>&lt;p&gt;Here’s an example of a simple server in Python that prints what it recieves, 
and sends back the same data uppercased.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socketserver&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTCPHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socketserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    The request handler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# self.rfile is a file-like object created by the handler;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# we can now use e.g. readline() instead of raw recv() calls&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{} wrote:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Likewise, self.wfile is a file-like object used to write back&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# to the client&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForkedTCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socketserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForkingMixIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socketserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Create the server, binding to localhost on port 9999&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ForkedTCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyTCPHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Activate the server; this will keep running until you&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# interrupt the program with Ctrl-C&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that this uses utilities supplied by Python 3, the &lt;code class=&quot;highlighter-rouge&quot;&gt;socketserver&lt;/code&gt; package,
which did not exist in Python 2.&lt;/p&gt;

&lt;p&gt;Also, it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;ForkingMixIn&lt;/code&gt;, which creates a new process for each request,
for greater availability.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2016 13:54:00 +0000</pubDate>
        <link>/2016/10/05/sockets-python.html</link>
        <guid isPermaLink="true">/2016/10/05/sockets-python.html</guid>
        
        
      </item>
    
      <item>
        <title>Game Plan</title>
        <description>&lt;p&gt;What are we doing in this course as a whole?&lt;/p&gt;

&lt;h3 id=&quot;packets&quot;&gt;Packets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What are packets called in different layers?
    &lt;ul&gt;
      &lt;li&gt;(messages, segments, datagrams, frames)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How many bits per packet?&lt;/li&gt;
  &lt;li&gt;What kinds of info does packet carry?&lt;/li&gt;
  &lt;li&gt;How is packet divided/organized?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;namingaddressing&quot;&gt;Naming/Addressing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IP Addresses: v4 and v6&lt;/li&gt;
  &lt;li&gt;Ports&lt;/li&gt;
  &lt;li&gt;MAC Addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Describe and classify algorithms&lt;/li&gt;
  &lt;li&gt;Dijkstra’s shortest path algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reliable-transport&quot;&gt;Reliable Transport&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Modeling using Finite State Machine&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;not-covered-in-readings-but-interesting-nonetheless&quot;&gt;Not covered in readings, but interesting nonetheless&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Wireless&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
        <link>/2016/10/04/game-plan.html</link>
        <guid isPermaLink="true">/2016/10/04/game-plan.html</guid>
        
        
      </item>
    
  </channel>
</rss>
